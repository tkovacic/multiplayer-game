var exp = require("express");
var app = exp();
var router = exp.Router();
var socketIO = require('socket.io');
var final_html;
var template_index = require("jade").compileFile(__dirname + "/views/index.jade");
var server = require('http').Server(app);

var player = require("./server/js/player.js");
test.init();

//views
app.set("views", __dirname + "/views");
app.set("view engine", "jade");

//middleware
router.use(function(req, res, next) {
	console.log("/" + req.method);
	next();
});

//routes
router.get("/", function(req, res, next) {
	try {
		final_html = template_index ({ title : "Demo" });
		res.send(final_html);
	} catch (e) {
		next(e);
	}
});
app.use(exp.static(__dirname + "/"), router);

router.get("/api", function(req, res) {
	res.json({"message": "API Page"});
});
app.use("/api", router);

//listening to port
server.listen(process.env.PORT || 3000, function() {
	console.log("listening at http://localhost:" + (process.env.PORT || 3000));
});
//-----------------------------------------------------------------------------------------------------------------------------------------------
//PUBLIC LIST OF SOCKETS
var SOCKET_LIST = {};
//CLASSES
//BEGINING OF PLAYER
var playerCount = 0;

// END OF PLAYER
// BEGINNING OF BULLET
var Bullet = function(angle) {
	var self = Entity();
	self.id = Math.random();
	self.spdX = Math.cos(angle/180*Math.PI) * 10;
	self.spdY = Math.sin(angle/180*Math.PI) * 10;
	self.timer = 0;
	self.toRemove = false;
	
	var super_update = self.update;
	self.update = function() {
		if(self.timer++ > 100)
			self.toRemove = true;
		super_update();
	}
	Bullet.list[self.id] = self;
	return self;
}
Bullet.list = {};
Bullet.update = function() {
	
	var pack = [];
	for(var i in Bullet.list) {
		var bullet = Bullet.list[i];
		bullet.update();
		pack.push({
			x:bullet.x,
			y:bullet.y,
		});
	}
	return pack;
}
//END OF BULLET
//socket.io server block
var io = socketIO(server);

io.on('connection', function (socket) { 
	socket.id = Math.random();
	SOCKET_LIST[socket.id] = socket;
	//use player class script to create player and onconnect event socket input
	Player.onConnect(socket);
	socket.on('disconnect', function() {
		delete SOCKET_LIST[socket.id];
		Player.onDisconnect(socket);
	});
});

setInterval(function() {
	var pack = {
		player:Player.update(),
		bullet:Bullet.update()
	}
	
	for(var i in SOCKET_LIST) {
		var socket = SOCKET_LIST[i];
		socket.emit('newPositions', pack);
	}
},1000/25); //1000/25