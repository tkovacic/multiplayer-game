var exp = require("express");
var app = exp();
var router = exp.Router();
var socketIO = require('socket.io');
var final_html;
var template_index = require("jade").compileFile(__dirname + "/views/index.jade");
var server = require('http').Server(app);

//views
app.set("views", __dirname + "/views");
app.set("view engine", "jade");

//middleware
router.use(function(req, res, next) {
	console.log("/" + req.method);
	next();
});

//routes
router.get("/", function(req, res, next) {
	try {
		final_html = template_index ({ title : "Demo" });
		res.send(final_html);
	} catch (e) {
		next(e);
	}
});
app.use(exp.static(__dirname + "/"), router);

router.get("/api", function(req, res) {
	res.json({"message": "API Page"});
});
app.use("/api", router);

//listening to port
server.listen(process.env.PORT || 3000, function() {
	console.log("listening at http://localhost:" + (process.env.PORT || 3000));
});

var SOCKET_LIST = {};
var PLAYER_LIST = {};

var Entity = function() {
	
}

var Player = function(id) {
	var self = {
			x: 250,
			y: 250,
			id: id,
			number: "" + Math.floor(10 * Math.random()),
			pressingRight:false,
			pressingLeft:false,
			pressingUp:false,
			pressingDown:false,
			maxSpd:10,
	}
	self.updatePosition = function() {
		if(self.pressingRight)
			self.x += self.maxSpd;
		if(self.pressingLeft)
			self.x -= self.maxSpd;
		if(self.pressingUp)
			self.y -= self.maxSpd;
		if(self.pressingDown)
			self.y += self.maxSpd;
	}
	return self;
}

//socket.io code block
var io = socketIO(server);

io.on('connection', function (socket) { 
	socket.id = Math.random();
	SOCKET_LIST[socket.id] = socket;
	
	var player = Player(socket.id);
	PLAYER_LIST[socket.id] = player;
	
	socket.on('keypress', function(data) {
		if(data.inputID === 'left')
			player.pressingLeft = data.state;
		else if(data.inputID === 'right')
			player.pressingRight = data.state;
		else if(data.inputID === 'up')
			player.pressingUp = data.state;
		else if(data.inputID === 'down')
			player.pressingDown = data.state;
	});
	
	socket.on('disconnect', function() {
		delete SOCKET_LIST[socket.id];
		delete PLAYER_LIST[socket.id];
	});
	
//	socket.emit('greeting-from-server', { greeting: 'Hello Client' }); 
//	socket.on('greeting-from-client', function (message) { 
//		console.log(message);
//	});
});

io.on('disconnect', function (socket) { 
	socket.id = Math.random();
	socket.x = 0;
	socket.y = 0;
	SOCKET_LIST[socket.id] = socket;
	
	socket.emit('greeting-from-server', { greeting: 'Hello Client' }); 
	socket.on('greeting-from-client', function (message) { 
		console.log(message);
	});
});

setInterval(function() {
	var pack = [];
	for(var i in PLAYER_LIST) {
		var player = PLAYER_LIST[i];
		player.updatePosition();
		pack.push({
			x:player.x,
			y:player.y,
			number:player.number
		});
	}
	
	for(var i in SOCKET_LIST) {
		var socket = SOCKET_LIST[i];
		socket.emit('newPositions', pack);
	}
},1000/25);